# -*- coding: utf-8 -*-
"""bitcoin.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hvQIXnQWC276QVVkklw2FRwo-Cj4eJ8D
"""





import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn import metrics

import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('/content/BTC-USD (2).csv')
df.head()

df.shape

df.describe()

df.info()

plt.figure(figsize=(15, 5))
plt.plot(df['Close'])
plt.title('Bitcoin Close price.', fontsize=15)
plt.ylabel('Price in dollars.')
plt.show()

df[df['Close'] == df['Adj Close']].shape, df.shape

print(df.columns)  # Print the available columns to verify if 'Adj Close' exists

# If 'Adj Close' exists, use the correct capitalization and spacing:
if 'Adj Close' in df.columns:
    df = df.drop(['Adj Close'], axis=1)
else:
    print("Column 'Adj Close' not found in DataFrame.")

df.isnull().sum()

!pip install seaborn
import seaborn as sb
import matplotlib.pyplot as plt

features = ['Open', 'High', 'Low', 'Close']

plt.subplots(figsize=(20,10))
for i, col in enumerate(features):
    plt.subplot(2,2,i+1)  # Indent this line
    sb.distplot(df[col])   # Indent this line
plt.show()

plt.subplots(figsize=(20,10))
for i, col in enumerate(features):
    plt.subplot(2,2,i+1) # Indented to indicate it's within the for loop
    sb.boxplot(df[col])  # Indented to indicate it's within the for loop
plt.show()

splitted = df['Date'].str.split('-', expand=True)

df['year'] = splitted[0].astype('int')
df['month'] = splitted[1].astype('int')
df['day'] = splitted[2].astype('int')

df.head()

import pandas as pd  # Import pandas for datetime handling

# Recreating the year, month, and day columns from the 'Date' column
df['Date'] = pd.to_datetime(df['Date'])  # Convert 'Date' column to datetime objects
df['year'] = df['Date'].dt.year
df['month'] = df['Date'].dt.month
df['day'] = df['Date'].dt.day

data_grouped = df.groupby('year').mean() # Now this should work without errors
plt.subplots(figsize=(20,10))
for i, col in enumerate(['Open', 'High', 'Low', 'Close']):
    plt.subplot(2,2,i+1)
    data_grouped[col].plot.bar()
plt.show()

df['is_quarter_end'] = np.where(df['month']%3==0,1,0)
df.head()

df['open-close'] = df['Open'] - df['Close']
df['low-high'] = df['Low'] - df['High']
df['target'] = np.where(df['Close'].shift(-1) > df['Close'], 1, 0)

plt.pie(df['target'].value_counts().values,
		labels=[0, 1], autopct='%1.1f%%')
plt.show()

plt.figure(figsize=(10, 10))

# As our concern is with the highly
# correlated features only so, we will visualize
# our heatmap as per that criteria only.
sb.heatmap(df.corr() > 0.9, annot=True, cbar=False)
plt.show()

features = df[['open-close', 'low-high', 'is_quarter_end']]
target = df['target']

scaler = StandardScaler()
features = scaler.fit_transform(features)

X_train, X_valid, Y_train, Y_valid = train_test_split(
	features, target, test_size=0.1, random_state=2022)
print(X_train.shape, X_valid.shape)

models = [LogisticRegression(), SVC(kernel='poly', probability=True), XGBClassifier()]

for i in range(3):
    models[i].fit(X_train, Y_train) # Indent this line

    print(f'{models[i]} : ')
    print('Training Accuracy : ', metrics.roc_auc_score(Y_train, models[i].predict_proba(X_train)[:,1]))
    print('Validation Accuracy : ', metrics.roc_auc_score(Y_valid, models[i].predict_proba(X_valid)[:,1]))
    print()

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

cm = confusion_matrix(Y_valid, models[0].predict(X_valid))
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()